# @see https://gist.github.com/pauloricardomg/7084524
# Nginx doesn't support nested If statements, so we concatenate
# compound conditions on the $cors variable and process later
set $cors "";
# If request comes from allowed subdomain
# (*.amocrm.com or *.amocrm.ru) then we enable CORS
if ($http_origin ~* (https://.*\.amocrm\.(?:com|ru)(:[0-9]+)?$)) {
    set $cors "1";
}

# OPTIONS indicates a CORS pre-flight request
if ($request_method = 'OPTIONS') {
    set $cors "${cors}o";
}

# Append CORS headers to any request from
# allowed CORS domain, except OPTIONS
if ($cors = "1") {
    add_header 'Access-Control-Allow-Origin' '$http_origin' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
}

# OPTIONS (pre-flight) request from allowed
# CORS domain. return response directly
if ($cors = "1o") {
    add_header 'Access-Control-Allow-Origin' '$http_origin';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
    add_header 'Access-Control-Allow-Credentials' 'true';
    # Custom headers and headers various browsers *should* be OK with but aren't
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    # Tell client that this pre-flight info is valid for 20 days
    add_header 'Access-Control-Max-Age' 1728000;
    add_header 'Content-Length' 0;
    add_header 'Content-Type' 'text/plain; charset=utf-8';
    return 204;
}